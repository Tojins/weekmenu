name: Database Schema Check

on:
  pull_request:
    paths:
      - 'supabase/migrations/**'
      - '.github/workflows/schema-check.yml'

jobs:
  check-migrations:
    runs-on: ubuntu-latest
    
    steps:
      - name: Checkout code
        uses: actions/checkout@v4
        with:
          fetch-depth: 0  # Fetch all history for proper diff

      - name: Setup Supabase CLI
        uses: supabase/setup-cli@v1
        with:
          version: latest

      - name: Check migration files
        run: |
          echo "Checking for new migration files..."
          
          # Get list of changed migration files
          CHANGED_MIGRATIONS=$(git diff --name-only origin/${{ github.base_ref }}...HEAD -- supabase/migrations/*.sql || echo "")
          
          if [ -z "$CHANGED_MIGRATIONS" ]; then
            echo "‚úÖ No migration changes detected"
            exit 0
          fi
          
          echo "Found changed migrations:"
          echo "$CHANGED_MIGRATIONS"
          
          # Check if migrations follow naming convention
          for file in $CHANGED_MIGRATIONS; do
            if [[ ! "$file" =~ ^supabase/migrations/[0-9]{14}_.*\.sql$ ]]; then
              echo "‚ùå Migration file doesn't follow naming convention: $file"
              echo "Expected format: supabase/migrations/YYYYMMDDHHMMSS_description.sql"
              exit 1
            fi
          done
          
          echo "‚úÖ All migration files follow naming convention"

      - name: Validate SQL syntax
        run: |
          # Basic SQL syntax validation
          for file in supabase/migrations/*.sql; do
            if [ -f "$file" ]; then
              echo "Validating $file..."
              
              # Check for common SQL issues
              if grep -i "DROP TABLE.*CASCADE" "$file"; then
                echo "‚ö†Ô∏è  Warning: Found DROP TABLE CASCADE in $file"
                echo "   This can be destructive. Make sure this is intentional."
              fi
              
              if grep -i "DELETE FROM" "$file" | grep -v "WHERE"; then
                echo "‚ö†Ô∏è  Warning: Found DELETE without WHERE clause in $file"
                echo "   This will delete all rows. Make sure this is intentional."
              fi
              
              # Check for missing semicolons (basic check)
              if ! tail -n 1 "$file" | grep -q ";$"; then
                echo "‚ö†Ô∏è  Warning: $file might be missing a final semicolon"
              fi
            fi
          done
          
          echo "‚úÖ SQL validation complete"

      - name: Comment PR with migration summary
        uses: actions/github-script@v7
        if: github.event_name == 'pull_request'
        with:
          script: |
            const fs = require('fs');
            const path = require('path');
            
            // Get changed migrations
            const { execSync } = require('child_process');
            const baseBranch = context.payload.pull_request.base.ref;
            const changedFiles = execSync(`git diff --name-only origin/${baseBranch}...HEAD -- supabase/migrations/*.sql`, { encoding: 'utf-8' })
              .split('\n')
              .filter(f => f);
            
            if (changedFiles.length === 0) return;
            
            let comment = '## üóÑÔ∏è Database Migration Summary\n\n';
            comment += `This PR includes ${changedFiles.length} migration file(s):\n\n`;
            
            for (const file of changedFiles) {
              if (!file) continue;
              const fileName = path.basename(file);
              comment += `- \`${fileName}\`\n`;
              
              // Try to extract first few lines as description
              try {
                const content = fs.readFileSync(file, 'utf-8');
                const lines = content.split('\n').slice(0, 5);
                const commentLines = lines.filter(l => l.startsWith('--')).slice(0, 2);
                if (commentLines.length > 0) {
                  comment += `  ${commentLines.join('\n  ')}\n`;
                }
              } catch (e) {
                // Ignore read errors
              }
            }
            
            comment += '\n### ‚ö†Ô∏è Reminder\n';
            comment += '- Ensure migrations have been tested locally\n';
            comment += '- Run `npm run db:push` after merging to apply to production\n';
            comment += '- Migrations cannot be modified after being applied to production\n';
            
            github.rest.issues.createComment({
              issue_number: context.issue.number,
              owner: context.repo.owner,
              repo: context.repo.repo,
              body: comment
            });